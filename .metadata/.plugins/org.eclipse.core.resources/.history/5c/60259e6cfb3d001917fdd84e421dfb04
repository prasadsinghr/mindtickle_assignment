package assignment.mindtickle;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import mt.qa.base.TestBase;
import mt.qa.pages.AddLearningContentPage;
import mt.qa.pages.ContentHomePage;
import mt.qa.pages.CreateNewCoursePage;
import mt.qa.pages.CreateTopicAndPublishPage;
import mt.qa.pages.EditCourseTopicPage;
import mt.qa.pages.LoginPage;
import mt.qa.util.CustomeListeners;
import mt.qa.util.TestUtil;

@Listeners(CustomeListeners.class)
public class AddLearningContentPageTest extends TestBase
{
	LoginPage lp;
	ContentHomePage homepage;
	CreateNewCoursePage createpage;
	CreateTopicAndPublishPage ctp;
	EditCourseTopicPage ectp;
	AddLearningContentPage alc;
	
	@BeforeSuite()
	public void setUp()
	{
		launchBrowser();
		lp=new LoginPage();
		homepage=lp.login(prop.getProperty("username"), prop.getProperty("password"));
		createpage =homepage.createCourse();
		ctp=new CreateTopicAndPublishPage();
		ectp = new EditCourseTopicPage();
		alc= new AddLearningContentPage();
	}

	@Test(priority=1)
	public void validateHeader()
	{
		String header=	alc.validateheader();
		Assert.assertEquals(header,"Add Content, Questions and Polls","invalid header");
	}
	
	@Test(priority=2,dataProvider="addLearningDataProviderMethod")
	public void addLearningContent(String Header,String descriptions,String Series, String Topic_name,String filepath) throws InterruptedException, IOException
	{
		ctp=createpage.createCourse(Header,descriptions,Series);
		ctp.addCourse(Topic_name);
		ectp.contentClick();
		alc.addLearingContent(filepath);
		Assert.assertTrue(alc.validateEle(), "names are not matching");
	
	}
	@DataProvider
	public Object[][] addLearningDataProviderMethod()
	{
		Object[][] data = TestUtil.getTestData("Add_LearingContent");
		return data;
	}
	
	
	
}
